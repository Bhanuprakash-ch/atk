.. _python_api/models/model-random_forest_classifier/test:


:doc:`RandomForestClassifierModel <index>`  test
************************************************

------


.. function:: test(self, frame, label_column, observation_columns=None)

    |ALPHA|
    Predict test frame labels and return metrics.


    :Parameters:

        **frame** : <bound method AtkEntityType.__name__ of <trustedanalytics.rest.jsonschema.AtkEntityType object at 0x7f02b59267d0>>

        ..

            The frame whose labels are to be predicted



        **label_column** : unicode

        ..

            Column containing the true labels of the observations



        **observation_columns** : list (default=None)

        ..

            Column(s) containing the observations whose labels are to be predicted.
            By default, we predict the labels over columns the RandomForest was trained on.




    :Returns:

        : dict

        ..

            An object with classification metrics.
            The data returned is composed of multiple components\:

            |  **double** : *accuracy*
            |  **table** : *confusion_matrix*
            |  **double** : *f_measure*
            |  **double** : *precision*
            |  **double** : *recall*
    Predict the labels for a test frame and run classification metrics on predicted
    and target labels.

    Examples
    --------
    Test the performance of a trained Random Forest Classifier Model

    .. only:: html

        .. code::

            >>> my_model = ta.RandomForestClassifierModel()
            >>> my_model.train(train_frame,'Class',['Dim_1','Dim_2'],num_classes=2)
            >>> my_model.test(train_frame,'Class')
              Precision: 1.0
              Recall: 1.0
              Accuracy: 1.0
              FMeasure: 1.0
              Confusion Matrix:
                            Predicted_Pos  Predicted_Neg
              Actual_Pos            94              0
              Actual_Neg             0            406

    .. only:: latex

        .. code::

            >>> my_model = ta.RandomForestClassifierModel()
            >>> my_model.train(train_frame,'Class',['Dim_1','Dim_2'],num_classes=2)
            >>> my_model.test(train_frame,'Class')
              Precision: 1.0
              Recall: 1.0
              Accuracy: 1.0
              FMeasure: 1.0
              Confusion Matrix:
                                Predicted_Pos  Predicted_Neg
              Actual_Pos                94              0
              Actual_Neg                 0            406



