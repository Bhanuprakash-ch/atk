

------------------------------------------------------------------------------------
:doc:`Commands <index>` model:h2o_random_forest_regressor_private/_distributed_train
------------------------------------------------------------------------------------

|BETA|
Build H2O Random Forests Regressor.

POST /v1/commands/
==================

GET /v1/commands/:id
====================

Request
-------

**Route** ::

  POST /v1/commands/

**Body**



:name:

    model:h2o_random_forest_regressor_private/_distributed_train

:arguments:


    **model** : Model

    ..

        Handle to the model to be used.



    **frame** : Frame

    ..

        A frame to train the model on



    **value_column** : unicode

    ..

        Column name containing the value for each observation



    **observation_columns** : list

    ..

        Column(s) containing the observations



    **num_trees** : int32 (default=50)

    ..

        Number of trees in the random forest.



    **max_depth** : int32 (default=20)

    ..

        Maximum depth of the tree.



    **num_bins** : int32 (default=20)

    ..

        For numerical columns (real/int), build a histogram of (at least) this many bins.



    **min_rows** : int32 (default=2)

    ..

        Minimum number of rows to assign to terminal nodes.



    **feature_subset_category** : unicode (default=auto)

    ..

        Number of features to consider for splits at each node. Supported values "auto", "all", "sqrt", "onethird".
        If "auto" is set, this is based on numTrees: if numTrees == 1, set to "all"; if numTrees > 1, set to "onethird".



    **seed** : int32 (default=None)

    ..

        Seed for random numbers (affects sampling) - Note: only reproducible when running single threaded.



    **sample_rate** : float64 (default=None)

    ..

        Row sample rate per tree (from 0.0 to 1.0).



|

**Headers** ::

  Authorization: test_api_key_1
  Content-type: application/json
|

**Description**

Creating a Random Forests Regressor Model using the observation columns and target column.
      H2O's implementation of distributed random forest is slow for large trees due to the
      overhead of shipping histograms across the network. This plugin runs H2O random forest
      on a multiple nodes for larger datasets.
      https://groups.google.com/forum/#!searchin/h2ostream/histogram%7Csort:relevance/h2ostream/bnyhPyxftX8/0d1ItQiyH98J
    

|

Response
--------

**Status** ::

  200 OK

**Body**

Returns information about the command.  See the Response Body for Get Command here below.  It is the same.


GET /v1/commands/:id
====================

Request
-------

**Route** ::

  GET /v1/commands/18

**Body**

(None)

**Headers** ::

  Authorization: test_api_key_1
  Content-type: application/json
|

Response
--------

**Status** ::

  200 OK

**Body**


``dict``

        object
              An object with the results of the trained Random Forest Regressor:
              |'value_column': the column name containing the value of each observation,
              |'observation_columns': the list of observation columns on which the model was trained,
              |'num_trees': the number of decision trees in the random forest,
              |'max_depth': the maximum depth of the tree,
              |'num_bins': for numerical columns, build a histogram of at least this many bins
              |'min_rows': number of features to consider for splits at each node
              |'feature_subset_category': number of features to consider for splits at each node,
              |'tree_stats': dictionary with tree statistics for trained model,
              |'varimp': variable importances
            


