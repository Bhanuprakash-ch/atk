
:doc:`Models<../index>` DaalKMeansModel
***************************************

------



.. toctree::
    :hidden:

    new
    last_read_date
    name
    predict
    status
    train

.. class:: DaalKMeansModel

    Entity DaalKMeansModel

    .. rubric:: Attributes

    ====================================================================================================  ====================================================================================================
    :doc:`last_read_date <last_read_date>`\                                                               Read-only property - Last time this model's data was accessed.
    :doc:`name <name>`\                                                                                   Set or get the name of the model object.
    :doc:`status <status>`\                                                                               Read-only property - Current model life cycle status.
    ====================================================================================================  ====================================================================================================

    .. rubric:: Methods

    ====================================================================================================  ====================================================================================================
    :ref:`__init__ <DaalKMeansModel__init__>`\ (self[, name, _info])                                      Create a 'new' instance of a DAAL k-means model.
    :doc:`predict <predict>`\ (self, frame[, observation_columns, label_column])                          |ALPHA| Predict the cluster assignments for the data points.
    :doc:`train <train>`\ (self, frame, observation_columns[, k, max_iterations, column_scalings, ...])   |ALPHA| Creates DAAL KMeans Model from train frame.
    ====================================================================================================  ====================================================================================================

.. _DaalKMeansModel__init__:


.. function:: __init__(self, name=None)

    Create a 'new' instance of a DAAL k-means model.


    :Parameters:

        **name** : unicode (default=None)

        ..

            User supplied name.




    :Returns:

        : Model

        ..

            A new instance of DaalKMeansModel
    k-means [1]_ is an unsupervised algorithm used to partition
    the data into 'k' clusters.
    Each observation can belong to only one cluster, the cluster with the nearest
    mean.
    The k-means model is initialized, trained on columns of a frame, and used to
    predict cluster assignments for a frame.

    This model runs the DAAL implementation of k-means[2]_. The K-Means clustering
    algorithm computes centroids using the Lloyd method[3]_

    .. rubric:: footnotes

    .. [1] https://en.wikipedia.org/wiki/K-means_clustering
    .. [2] https://software.intel.com/en-us/daal
    .. [3] https://en.wikipedia.org/wiki/Lloyd%27s_algorithm

    Examples
    --------
    Consider the following model trained and tested on the sample data set in *frame* 'frame'.

    Consider the following frame containing two columns.

    >>> frame.inspect()
    [#]  data   name     cluster
    ============================
    [0]    2.0  ab             1
    [1]    1.0  cd             1
    [2]    7.0  ef             1
    [3]    1.0  gh             1
    [4]    9.0  ij             1
    [5]    2.0  kl             1
    [6]    0.0  mn             1
    [7]    6.0  op             1
    [8]    5.0  qr             1
    [9]  120.0  outlier        0

    >>> model = ta.DaalKMeansModel()
    [===Job Progress===]
    >>> train_output = model.train(frame, ["data"],  2, max_iterations = 20)
    [===Job Progress===]
    >>> train_output
    {'assignments': Frame  <unnamed>
     row_count = 10
     schema = [data:float64, name:unicode, cluster:int32]
     status = ACTIVE  (last_read_date = 2016-03-14T19:10:31.601000-07:00),
     'centroids': {u'Cluster:1': [120.0], u'Cluster:2': [3.6666666666666665]}}
    >>> predicted_frame = model.predict(frame, ["data"])
    [===Job Progress===]
    >>> predicted_frame.inspect()
    [#]  data   name     cluster
    ============================
    [0]    2.0  ab             1
    [1]    1.0  cd             1
    [2]    7.0  ef             1
    [3]    1.0  gh             1
    [4]    9.0  ij             1
    [5]    2.0  kl             1
    [6]    0.0  mn             1
    [7]    6.0  op             1
    [8]    5.0  qr             1
    [9]  120.0  outlier        0
    [===Job Progress===]
