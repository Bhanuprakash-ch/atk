
:doc:`NaiveBayesModel <index>`  __init__
****************************************

------


.. function:: __init__(self, name=None)

    Create a 'new' instance of a Naive Bayes model


    :Parameters:

        **name** : unicode (default=None)

        ..

            User supplied name.




    :Returns:

        : Model

        ..

            A new instance of NaiveBayesModel
    Naive Bayes [1]_ is a probabilistic classifier with strong
    independence assumptions between features.
    It computes the conditional probability distribution of each feature given label,
    and then applies Bayes' theorem to compute the conditional probability
    distribution of a label given an observation, and use it for prediction.
    The Naive Bayes model is initialized, trained on columns of a frame, tested against true labels of a frame and used
    to predict the value of the dependent variable given the independent
    observations of a frame and test the performance of the classification on test data.
    This model runs the MLLib implementation of Naive Bayes [2]_.

    .. rubric:: footnotes

    .. [1] https://en.wikipedia.org/wiki/Naive_Bayes_classifier
    .. [2] https://spark.apache.org/docs/1.5.0/mllib-naive-bayes.html
                 

    Examples
    --------
    Consider the following model trained and tested on the sample data set in *frame* 'frame'.

    Consider the following frame containing three columns.

    >>> frame.inspect()
    [#]  Class  Dim_1          Dim_2
    =======================================
    [0]      1  19.8446136104  2.2985856384
    [1]      1  16.8973559126  2.6933495054
    [2]      1   5.5548729596  2.7777687995
    [3]      0  46.1810010826  3.1611961917
    [4]      0  44.3117586448  3.3458963222
    [5]      0  34.6334526911  3.6429838715

    >>> model = ta.NaiveBayesModel()
    [===Job Progress===]
    >>> model.train(frame, 'Class', ['Dim_1', 'Dim_2'], lambda_parameter=0.9)
    [===Job Progress===]
    >>> predicted_frame = model.predict(frame, ['Dim_1', 'Dim_2'])
    [===Job Progress===]
    >>> predicted_frame.inspect()
    [#]  Class  Dim_1          Dim_2         predicted_class
    ========================================================
    [0]      1  19.8446136104  2.2985856384              0.0
    [1]      1  16.8973559126  2.6933495054              1.0
    [2]      1   5.5548729596  2.7777687995              1.0
    [3]      0  46.1810010826  3.1611961917              0.0
    [4]      0  44.3117586448  3.3458963222              0.0
    [5]      0  34.6334526911  3.6429838715              0.0

    >>> test_metrics = model.test(frame, 'Class', ['Dim_1','Dim_2'])
    [===Job Progress===]
    >>> test_metrics
    Precision: 1.0
    Recall: 0.666666666667
    Accuracy: 0.833333333333
    FMeasure: 0.8
    Confusion Matrix:
                Predicted_Pos  Predicted_Neg
    Actual_Pos              2              1
    Actual_Neg              0              3
    >>> model.publish()
    [===Job Progress===]

    # Take the path to the published model and run it in the Scoring Engine
    >>> import requests
    >>> headers = {'Content-type': 'application/json', 'Accept': 'application/json,text/plain'}

    # posting a request to get the metadata about the model
    >>> r =requests.get('http://mymodel.demotrustedanalytics.com/v2/metadata')
    >>> r.text
    u'{"model_details":{"model_type":"Naive Bayes Model","model_class":"org.apache.spark.mllib.classification.NaiveBayesScoringModel","model_reader":"org.trustedanalytics.atk.scoring.models.NaiveBayesReaderPlugin","custom_values":{}},"input":[{"name":"Dim_1","value":"Double"},{"name":"Dim_2","value":"Double"}],"output":[{"name":"Dim_1","value":"Double"},{"name":"Dim_2","value":"Double"},{"name":"score","value":"Double"}]}'

    # Posting a request to version 1 of Scoring Engine supporting strings for requests and response:
    >>> r = requests.post('http://mymodel.demotrustedanalytics.com/v1/score?data=19.8446, 2.298585', headers=headers)
    >>> r.text
    u'0.0'

    # Posting a request to version 1 with multiple records to score:
    >>> r = requests.post('http://mymodel.demotrustedanalytics.com/v1/score?data=19.8446&data=5.5548729596, 2.7777687995', headers=headers)
    >>> r.text
    u'0.0,1.0'

    # Posting a request to version 2 of Scoring Engine supporting Json for requests and responses.
    >>> r = requests.post("http://mymodel.demotrustedanalytics.com/v2/score", json={"records": [{"Dim_1": 19.8446, "Dim_2": 2.298585}]})
    >>> r.text
    u'{"data":[{"Dim_1":19.8446,"Dim_2":2.298585,"score":[0.0]}]}'

    # posting a request to version 2 with multiple records to score:
    >>> r = requests.post("http://mymodel.demotrustedanalytics.com/v2/score", json={"records": [{"Dim_1": 19.8446, "Dim_2": 2.298585}, {"Dim_1": 5.5548729596 , "Dim_2": 2.7777687995}]})
    >>> r.text
    u'{"data":[{"Dim_1":19.8446,"Dim_2":2.298585,"score":[0.0]},{"Dim_1":5.5548729596,"Dim_2":2.7777687995,"score":[1.0]}]}'

