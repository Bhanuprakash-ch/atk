.. _python_api/models/model-random_forest_classifier/index:


:doc:`Models<../index>` RandomForestClassifierModel
***************************************************

------



.. toctree::
    :hidden:

    new
    name
    predict
    publish
    test
    train

.. class:: RandomForestClassifierModel

    Create a 'new' instance of a Random Forest Classifier model.

    **Classification using Random Forest**

    Random Forest[1]_ is a supervised ensemble learning algorithm which can be used to perform binary and multi-class classification.
    The user may initialize a RandomForestClassifierModel, train the model on columns of a frame,
    use the model to predict the labels of observations in a frame and test the predicted labels against the true labels.
    This model runs the MLLib implementation of Random Forest[2]_. During training, the decision trees are trained in parallel.
    During prediction, each tree's prediction is counted as vote for one class. The label is predicted to be the class which
    receives the most votes. During testing, labels of the observations are predicted and tested against the true labels
    using in-built binary and multiclass ClassificationMetrics.

    .. [1] https://en.wikipedia.org/wiki/Random_forest
    .. [2] https://spark.apache.org/docs/1.3.0/mllib-ensembles.html
     

    .. rubric:: Attributes

    ====================================================================================================  ====================================================================================================
    :doc:`name <name>`\                                                                                   Set or get the name of the model object.
    ====================================================================================================  ====================================================================================================

    .. rubric:: Methods

    ====================================================================================================  ====================================================================================================
    :ref:`__init__ <RandomForestClassifierModel__init__>`\ (self[, name, _info])                          Create a 'new' instance of a Random Forest Classifier model.
    :doc:`predict <predict>`\ (self, frame[, observation_columns])                                        |ALPHA| Predict the labels for the data points.
    :doc:`publish <publish>`\ (self)                                                                      |BETA| Creates a tar file that will be used as input to the scoring engine
    :doc:`test <test>`\ (self, frame, label_column[, observation_columns])                                |ALPHA| Predict test frame labels and return metrics.
    :doc:`train <train>`\ (self, frame, label_column, observation_columns[, num_classes, ...])            |ALPHA| Build Random Forests Classifier model.
    ====================================================================================================  ====================================================================================================

.. _RandomForestClassifierModel__init__:


.. function:: __init__(self, name=None)

    Create a 'new' instance of a Random Forest Classifier model.


    :Parameters:

        **name** : unicode (default=None)

        ..

            User supplied name.




    :Returns:

        : <bound method AtkEntityType.__name__ of <trustedanalytics.rest.jsonschema.AtkEntityType object at 0x7fe61e2b6210>>

        ..


    **Classification using Random Forest**

    Random Forest[1]_ is a supervised ensemble learning algorithm which can be used to perform binary and multi-class classification.
    The user may initialize a RandomForestClassifierModel, train the model on columns of a frame,
    use the model to predict the labels of observations in a frame and test the predicted labels against the true labels.
    This model runs the MLLib implementation of Random Forest[2]_. During training, the decision trees are trained in parallel.
    During prediction, each tree's prediction is counted as vote for one class. The label is predicted to be the class which
    receives the most votes. During testing, labels of the observations are predicted and tested against the true labels
    using in-built binary and multiclass ClassificationMetrics.

    .. [1] https://en.wikipedia.org/wiki/Random_forest
    .. [2] https://spark.apache.org/docs/1.3.0/mllib-ensembles.html
     
