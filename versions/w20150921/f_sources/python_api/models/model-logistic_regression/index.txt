.. _python_api/models/model-logistic_regression/index:


:doc:`Models<../index>` LogisticRegressionModel
***********************************************

------



.. toctree::
    :hidden:

    new
    name
    predict
    test
    train

.. class:: LogisticRegressionModel

    Create a 'new' instance of logistic regression model.

    **Classification using Logistic Regression**

    Logistic Regression[1]_ is a widely used supervised binary and multi-class classification algorithm. The user may initialize a LogisticRegressionModel,
    train the model on columns of a frame, use the model to predict the labels of observations in a frame and test the predicted labels against the true labels. This model
    runs the MLLib implementation of LogisticRegression[2]_ with enhanced features - trained model Summary Statistics, Covariance and Hessian Matrices, and
    ability to specify the frequency of the train and test observations. Testing performance can be viewed via in-built binary and multiclass Classification Metrics. It also allows
    the user to select the optimizer to be used - L-BFGS[3]_ or SGD[4]_.

    .. [1] https://en.wikipedia.org/wiki/Logistic_regression
    .. [2] https://spark.apache.org/docs/1.3.0/mllib-linear-methods.html#logistic-regression
    .. [3] https://en.wikipedia.org/wiki/Limited-memory_BFGS
    .. [4] https://en.wikipedia.org/wiki/Stochastic_gradient_descent
        

    .. rubric:: Attributes

    ====================================================================================================  ====================================================================================================
    :doc:`name <name>`\                                                                                   Set or get the name of the model object.
    ====================================================================================================  ====================================================================================================

    .. rubric:: Methods

    ====================================================================================================  ====================================================================================================
    :ref:`__init__ <LogisticRegressionModel__init__>`\ (self[, name, _info])                              Create a 'new' instance of logistic regression model.
    :doc:`predict <predict>`\ (self, frame[, observation_columns])                                        |ALPHA| Make a new frame with a column for label prediction.
    :doc:`test <test>`\ (self, frame, label_column[, observation_columns])                                |ALPHA| Predict test frame labels and show metrics.
    :doc:`train <train>`\ (self, frame, label_column, observation_columns[, frequency_column, ...])       |ALPHA| Build logistic regression model.
    ====================================================================================================  ====================================================================================================

.. _LogisticRegressionModel__init__:


.. function:: __init__(self, name=None)

    Create a 'new' instance of logistic regression model.


    :Parameters:

        **name** : unicode (default=None)

        ..

            User supplied name.




    :Returns:

        : <bound method AtkEntityType.__name__ of <trustedanalytics.rest.jsonschema.AtkEntityType object at 0x7f675f7ab0d0>>

        ..


    **Classification using Logistic Regression**

    Logistic Regression[1]_ is a widely used supervised binary and multi-class classification algorithm. The user may initialize a LogisticRegressionModel,
    train the model on columns of a frame, use the model to predict the labels of observations in a frame and test the predicted labels against the true labels. This model
    runs the MLLib implementation of LogisticRegression[2]_ with enhanced features - trained model Summary Statistics, Covariance and Hessian Matrices, and
    ability to specify the frequency of the train and test observations. Testing performance can be viewed via in-built binary and multiclass Classification Metrics. It also allows
    the user to select the optimizer to be used - L-BFGS[3]_ or SGD[4]_.

    .. [1] https://en.wikipedia.org/wiki/Logistic_regression
    .. [2] https://spark.apache.org/docs/1.3.0/mllib-linear-methods.html#logistic-regression
    .. [3] https://en.wikipedia.org/wiki/Limited-memory_BFGS
    .. [4] https://en.wikipedia.org/wiki/Stochastic_gradient_descent
        
