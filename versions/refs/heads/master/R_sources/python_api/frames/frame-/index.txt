
:doc:`Frames<../index>` Frame
*****************************

------



.. toctree::
    :hidden:

    __init__
    add_columns
    append
    assign_sample
    bin_column
    bin_column_equal_depth
    bin_column_equal_width
    categorical_summary
    classification_metrics
    column_median
    column_mode
    column_names
    column_summary_statistics
    copy
    correlation
    correlation_matrix
    count
    covariance
    covariance_matrix
    cumulative_percent
    cumulative_sum
    daal_covariance_matrix
    dot_product
    download
    drop_columns
    drop_duplicates
    drop_rows
    ecdf
    entropy
    export_to_csv
    export_to_hbase
    export_to_hive
    export_to_jdbc
    export_to_json
    filter
    flatten_columns
    get_error_frame
    group_by
    histogram
    inspect
    join
    last_read_date
    name
    quantiles
    rename_columns
    row_count
    schema
    sort
    sorted_k
    status
    take
    tally
    tally_percent
    timeseries_augmented_dickey_fuller_test
    timeseries_breusch_godfrey_test
    timeseries_breusch_pagan_test
    timeseries_durbin_watson_test
    timeseries_from_observations
    timeseries_slice
    top_k
    unflatten_columns

.. class:: Frame


        Large table of data.

        Acts as a proxy object to a frame of data on the server, with properties and functions to operate on that frame.
        

    .. rubric:: Attributes

    ====================================================================================================  ====================================================================================================
    :doc:`column_names <column_names>`\                                                                   Column identifications in the current frame.
    :doc:`last_read_date <last_read_date>`\                                                               Last time this frame's data was accessed.
    :doc:`name <name>`\                                                                                   Set or get the name of the frame object.
    :doc:`row_count <row_count>`\                                                                         Number of rows in the current frame.
    :doc:`schema <schema>`\                                                                               Current frame column names and types.
    :doc:`status <status>`\                                                                               Current frame life cycle status.
    ====================================================================================================  ====================================================================================================

    .. rubric:: Methods

    ====================================================================================================  ====================================================================================================
    :ref:`__init__ <Frame__init__>`\ (self[, source, name, _info])                                        Create a Frame/frame.
    :doc:`add_columns <add_columns>`\ (self, func, schema[, columns_accessed])                            Add columns to current frame.
    :doc:`append <append>`\ (self, data)                                                                  Adds more data to the current frame.
    :doc:`assign_sample <assign_sample>`\ (self, sample_percentages[, sample_labels, ...])                Randomly group rows into user-defined classes.
    :doc:`bin_column <bin_column>`\ (self, column_name, cutoffs[, include_lowest, strict_binning, ...])   Classify data into user-defined groups.
    :doc:`bin_column_equal_depth <bin_column_equal_depth>`\ (self, column_name[, num_bins, ...])          Classify column into groups with the same frequency.
    :doc:`bin_column_equal_width <bin_column_equal_width>`\ (self, column_name[, num_bins, ...])          Classify column into same-width groups.
    :doc:`categorical_summary <categorical_summary>`\ (self, \*column_inputs)                             Compute a summary of the data in a column(s) for categorical or numerical data types.
    :doc:`classification_metrics <classification_metrics>`\ (self, label_column, pred_column[, ...])      Model statistics of accuracy, precision, and others.
    :doc:`column_median <column_median>`\ (self, data_column[, weights_column])                           Calculate the (weighted) median of a column.
    :doc:`column_mode <column_mode>`\ (self, data_column[, weights_column, max_modes_returned])           Evaluate the weights assigned to rows.
    :doc:`column_summary_statistics <column_summary_statistics>`\ (self, data_column[, ...])              Calculate multiple statistics for a column.
    :doc:`copy <copy>`\ (self[, columns, where, name])                                                    Create new frame from current frame.
    :doc:`correlation <correlation>`\ (self, data_column_names)                                           Calculate correlation for two columns of current frame.
    :doc:`correlation_matrix <correlation_matrix>`\ (self, data_column_names[, matrix_name])              Calculate correlation matrix for two or more columns.
    :doc:`count <count>`\ (self, where)                                                                   Counts the number of rows which meet given criteria.
    :doc:`covariance <covariance>`\ (self, data_column_names)                                             Calculate covariance for exactly two columns.
    :doc:`covariance_matrix <covariance_matrix>`\ (self, data_column_names[, matrix_name])                Calculate covariance matrix for two or more columns.
    :doc:`cumulative_percent <cumulative_percent>`\ (self, sample_col)                                    Add column to frame with cumulative percent sum.
    :doc:`cumulative_sum <cumulative_sum>`\ (self, sample_col)                                            Add column to frame with cumulative percent sum.
    :doc:`daal_covariance_matrix <daal_covariance_matrix>`\ (self, data_column_names[, matrix_name])      |BETA| Calculate covariance matrix for two or more columns.
    :doc:`dot_product <dot_product>`\ (self, left_column_names, right_column_names, ...[, ...])           Calculate dot product for each row in current frame.
    :doc:`download <download>`\ (self[, n, offset, columns])                                              Download frame data from the server into client workspace as a pandas dataframe
    :doc:`drop_columns <drop_columns>`\ (self, columns)                                                   Remove columns from the frame.
    :doc:`drop_duplicates <drop_duplicates>`\ (self[, unique_columns])                                    Modify the current frame, removing duplicate rows.
    :doc:`drop_rows <drop_rows>`\ (self, predicate)                                                       Erase any row in the current frame which qualifies.
    :doc:`ecdf <ecdf>`\ (self, column[, result_frame_name])                                               Builds new frame with columns for data and distribution.
    :doc:`entropy <entropy>`\ (self, data_column[, weights_column])                                       Calculate the Shannon entropy of a column.
    :doc:`export_to_csv <export_to_csv>`\ (self, folder_name[, separator, count, offset])                 Write current frame to HDFS in csv format.
    :doc:`export_to_hbase <export_to_hbase>`\ (self, table_name[, key_column_name, family_name])          Write current frame to HBase table.
    :doc:`export_to_hive <export_to_hive>`\ (self, table_name)                                            Write  current frame to Hive table.
    :doc:`export_to_jdbc <export_to_jdbc>`\ (self, table_name[, connector_type])                          Write current frame to JDBC table.
    :doc:`export_to_json <export_to_json>`\ (self, folder_name[, count, offset])                          Write current frame to HDFS in JSON format.
    :doc:`filter <filter>`\ (self, predicate)                                                             Select all rows which satisfy a predicate.
    :doc:`flatten_columns <flatten_columns>`\ (self, columns[, delimiters])                               Spread data to multiple rows based on cell data.
    :doc:`get_error_frame <get_error_frame>`\ (self)                                                      Get a frame with error recordings.
    :doc:`group_by <group_by>`\ (self, group_by_columns, \*aggregation_arguments)                         Create summarized frame.
    :doc:`histogram <histogram>`\ (self, column_name[, num_bins, weight_column_name, bin_type])           Compute the histogram for a column in a frame.
    :doc:`inspect <inspect>`\ (self[, n, offset, columns, wrap, truncate, round, width, margin, ...])     Pretty-print of the frame data
    :doc:`join <join>`\ (self, right, left_on[, right_on, how, name])                                     Join operation on one or two frames, creating a new frame.
    :doc:`quantiles <quantiles>`\ (self, column_name, quantiles)                                          New frame with Quantiles and their values.
    :doc:`rename_columns <rename_columns>`\ (self, names)                                                 Rename columns
    :doc:`sort <sort>`\ (self, columns[, ascending])                                                      Sort the data in a frame.
    :doc:`sorted_k <sorted_k>`\ (self, k, column_names_and_ascending[, reduce_tree_depth])                Get a sorted subset of the data.
    :doc:`take <take>`\ (self, n[, offset, columns])                                                      Get data subset.
    :doc:`tally <tally>`\ (self, sample_col, count_val)                                                   Count number of times a value is seen.
    :doc:`tally_percent <tally_percent>`\ (self, sample_col, count_val)                                   Compute a cumulative percent count.
    :doc:`timeseries_augmented_dickey_fuller_test <timeseries_augmented_dickey_fuller_test>`\ (...)       Augmented Dickey-Fuller statistics test
    :doc:`timeseries_breusch_godfrey_test <timeseries_breusch_godfrey_test>`\ (self, residuals, ...)      Breusch-Godfrey statistics test
    :doc:`timeseries_breusch_pagan_test <timeseries_breusch_pagan_test>`\ (self, residuals, factors)      Breusch-Pagan statistics test
    :doc:`timeseries_durbin_watson_test <timeseries_durbin_watson_test>`\ (self, residuals)               Durbin-Watson statistics test
    :doc:`timeseries_from_observations <timeseries_from_observations>`\ (self, date_time_index, ...)      Returns a frame that has the observations formatted as a time series.
    :doc:`timeseries_slice <timeseries_slice>`\ (self, date_time_index, start, end)                       Returns a frame that is a sub-slice of the given series.
    :doc:`top_k <top_k>`\ (self, column_name, k[, weights_column])                                        Most or least frequent column values.
    :doc:`unflatten_columns <unflatten_columns>`\ (self, columns[, delimiter])                            Compacts data from multiple rows based on cell data.
    ====================================================================================================  ====================================================================================================

.. _Frame__init__:


.. function:: __init__(self, source=None, name=None)

    Create a Frame/frame.


    :Parameters:

        **source** : CsvFile | Frame (default=None)

        ..

            A source of initial data.



        **name** : str (default=None)

        ..

            The name of the newly created frame.
            Default is None.


    Notes
    -----
    A frame with no name is subject to garbage collection.

    If a string in the CSV file starts and ends with a double-quote (")
    character, the character is stripped off of the data before it is put into
    the field.
    Anything, including delimiters, between the double-quote characters is
    considered part of the str.
    If the first character after the delimiter is anything other than a
    double-quote character, the string will be composed of all the characters
    between the delimiters, including double-quotes.
    If the first field type is str, leading spaces on each row are
    considered part of the str.
    If the last field type is str, trailing spaces on each row are
    considered part of the str.

    Examples
    --------
    Create a new frame based upon the data described in the CsvFile object
    *my_csv_schema*.
    Name the frame "myframe".
    Create a Frame *my_frame* to access the data:

    .. code::

        >>> my_frame = ta.Frame(my_csv_schema, "myframe")

    A Frame object has been created and *my_frame* is its proxy.
    It brought in the data described by *my_csv_schema*.
    It is named *myframe*.

    Create an empty frame; name it "yourframe":

    .. code::

        >>> your_frame = ta.Frame(name='yourframe')

    A frame has been created and Frame *your_frame* is its proxy.
    It has no data yet, but it does have the name *yourframe*.

