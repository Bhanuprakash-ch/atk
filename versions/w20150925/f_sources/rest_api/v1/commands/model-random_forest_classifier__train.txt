.. _rest_api/v1/commands/model-random_forest_classifier__train:



------------------------------------------------------------
:doc:`Commands <index>` model:random_forest_classifier/train
------------------------------------------------------------

|ALPHA|
Build Random Forests Classifier model.

POST /v1/commands/
==================

GET /v1/commands/:id
====================

Request
-------

**Route** ::

  POST /v1/commands/

**Body**



:name:

    model:random_forest_classifier/train

:arguments:


    **model** : <bound method AtkEntityType.__name__ of <trustedanalytics.rest.jsonschema.AtkEntityType object at 0x7f5df70663d0>>

    ..

        Handle to the model to be used.



    **frame** : <bound method AtkEntityType.__name__ of <trustedanalytics.rest.jsonschema.AtkEntityType object at 0x7f5df7066350>>

    ..

        A frame to train the model on.



    **label_column** : unicode

    ..

        Column name containing the label for each observation.



    **observation_columns** : list

    ..

        Column(s) containing the observations.



    **num_classes** : int32 (default=2)

    ..

        Number of classes for classification.



    **num_trees** : int32 (default=1)

    ..

        Number of tress in the random forest.



    **impurity** : unicode (default=gini)

    ..

        Criterion used for information gain calculation.
        Supported values "gini" or "entropy"



    **max_depth** : int32 (default=4)

    ..

        Maximum depth of the tree.



    **max_bins** : int32 (default=100)

    ..

        Maximum number of bins used for
        splitting features.



    **seed** : int32 (default=-246156022)

    ..

        Random seed for bootstrapping and
        choosing feature subsets



    **categorical_features_info** : None (default=None)

    ..

        <Missing Description>



    **feature_subset_category** : unicode (default=None)

    ..

        Number of features to consider for splits at each node.
        Supported values\: "auto","all","sqrt","log2","onethird".



|

**Headers** ::

  Authorization: test_api_key_1
  Content-type: application/json
|

**Description**

Creating a Random Forests Classifier Model using the observation columns and label column.

|

Response
--------

**Status** ::

  200 OK

**Body**

Returns information about the command.  See the Response Body for Get Command here below.  It is the same.


GET /v1/commands/:id
====================

Request
-------

**Route** ::

  GET /v1/commands/18

**Body**

(None)

**Headers** ::

  Authorization: test_api_key_1
  Content-type: application/json
|

Response
--------

**Status** ::

  200 OK

**Body**


``dict``

        Values of the Random Forest Classifier model object storing\:

        |  the list of observation columns on which the model was trained,
        |  the column name containing the labels of the observations,
        |  the number of classes,
        |  the number of decision trees in the random forest,
        |  the number of nodes in the random forest,
        |  the map storing :term:`arity` of categorical features,
        |  the criterion used for information gain calculation,
        |  the maximum depth of the tree,
        |  the maximum number of bins used for splitting features,
        |  the random seed used for bootstrapping and choosing feature subset.



